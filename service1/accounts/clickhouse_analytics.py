# -*- coding: utf-8 -*-
"""
ClickHouse Analytics –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ClickHouse Cloud
"""

import clickhouse_connect
import logging
from django.conf import settings
from datetime import datetime
import json

logger = logging.getLogger(__name__)

class ClickHouseLogger:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ClickHouse –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ClickHouse"""
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse Cloud
            self.client = clickhouse_connect.get_client(
                host='xoj50zb4vb.us-west-2.aws.clickhouse.cloud',
                port=8443,
                username='default',
                password=getattr(settings, 'CLICKHOUSE_PASSWORD', ''),  # –ü–∞—Ä–æ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                database='default',
                secure=True  # SSL –¥–ª—è Cloud
            )
            logger.info("‚úÖ ClickHouse –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            self._create_tables()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse: {e}")
            self.client = None

    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ ClickHouse"""
        if not self.client:
            return
            
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.client.command('''
                CREATE TABLE IF NOT EXISTS user_events (
                    user_id UInt64,
                    username String,
                    event_type String,
                    email String,
                    ip_address String,
                    user_agent String,
                    timestamp DateTime DEFAULT now(),
                    data String DEFAULT ''
                ) ENGINE = MergeTree()
                ORDER BY (user_id, timestamp)
            ''')
            
            # –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –¥–Ω—è–º
            self.client.command('''
                CREATE MATERIALIZED VIEW IF NOT EXISTS registration_stats
                ENGINE = SummingMergeTree()
                ORDER BY date
                AS SELECT
                    toDate(timestamp) as date,
                    count() as registrations
                FROM user_events
                WHERE event_type = 'registration'
                GROUP BY date
            ''')
            
            # –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ email –¥–æ–º–µ–Ω–æ–≤
            self.client.command('''
                CREATE MATERIALIZED VIEW IF NOT EXISTS email_domains_stats
                ENGINE = SummingMergeTree()
                ORDER BY domain
                AS SELECT
                    splitByChar('@', email)[2] as domain,
                    count() as users_count
                FROM user_events
                WHERE event_type = 'registration' AND email != ''
                GROUP BY domain
            ''')
            
            logger.info("üìä –¢–∞–±–ª–∏—Ü—ã ClickHouse —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü ClickHouse: {e}")

    def log_event(self, user_id, username, event_type, email='', ip_address='', user_agent='', data=''):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (registration, login, logout, email_sent, email_verified)
            email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ip_address: IP –∞–¥—Ä–µ—Å
            user_agent: User Agent –±—Ä–∞—É–∑–µ—Ä–∞
            data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        """
        if not self.client:
            logger.warning("‚ö†Ô∏è ClickHouse –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–±—ã—Ç–∏–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ")
            return
            
        try:
            self.client.insert('user_events', [
                [user_id, username, event_type, email, ip_address, user_agent, datetime.now(), data]
            ])
            logger.info(f"üìù –°–æ–±—ã—Ç–∏–µ '{event_type}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' –∑–∞–ø–∏—Å–∞–Ω–æ –≤ ClickHouse")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ ClickHouse: {e}")

    def log_registration(self, user_id, username, email, ip_address='', user_agent=''):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.log_event(
            user_id=user_id,
            username=username,
            event_type='registration',
            email=email,
            ip_address=ip_address,
            user_agent=user_agent,
            data=json.dumps({'source': 'django_registration'})
        )

    def log_login(self, user_id, username, ip_address='', user_agent=''):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.log_event(
            user_id=user_id,
            username=username,
            event_type='login',
            ip_address=ip_address,
            user_agent=user_agent,
            data=json.dumps({'source': 'django_login'})
        )

    def log_logout(self, user_id, username, ip_address='', user_agent=''):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.log_event(
            user_id=user_id,
            username=username,
            event_type='logout',
            ip_address=ip_address,
            user_agent=user_agent,
            data=json.dumps({'source': 'django_logout'})
        )

    def log_email_sent(self, user_id, username, email, email_type):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
        self.log_event(
            user_id=user_id,
            username=username,
            event_type='email_sent',
            email=email,
            data=json.dumps({'email_type': email_type, 'source': 'django_email'})
        )

    def log_email_verified(self, user_id, username, email):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email"""
        self.log_event(
            user_id=user_id,
            username=username,
            event_type='email_verified',
            email=email,
            data=json.dumps({'source': 'django_email_verification'})
        )
    
    def log_profile_update(self, user_id, username, changes, ip_address='', user_agent=''):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            changes_list = []
            for field, new_value in changes.items():
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if new_value is not None and new_value != '':
                    if field == 'avatar':
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–∏
                        filename = new_value.split('/')[-1] if '/' in new_value else new_value
                        changes_list.append(f"üñºÔ∏è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞: {filename}")
                    elif field == 'first_name':
                        changes_list.append(f"üë§ –∏–º—è: {new_value}")
                    elif field == 'last_name':
                        changes_list.append(f"üë§ —Ñ–∞–º–∏–ª–∏—è: {new_value}")
                    elif field == 'phone':
                        changes_list.append(f"üìû —Ç–µ–ª–µ—Ñ–æ–Ω: {new_value}")
                    elif field == 'city':
                        changes_list.append(f"üèôÔ∏è –≥–æ—Ä–æ–¥: {new_value}")
                    elif field == 'birth_date':
                        changes_list.append(f"üéÇ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {new_value}")
                    else:
                        changes_list.append(f"{field}: {new_value}")
                else:
                    # –ï—Å–ª–∏ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ
                    if field == 'avatar':
                        changes_list.append(f"üñºÔ∏è —É–¥–∞–ª–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞")
                    elif field == 'first_name':
                        changes_list.append(f"üë§ –æ—á–∏—â–µ–Ω–æ –∏–º—è")
                    elif field == 'last_name':
                        changes_list.append(f"üë§ –æ—á–∏—â–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è")
                    elif field == 'phone':
                        changes_list.append(f"üìû –æ—á–∏—â–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω")
                    elif field == 'city':
                        changes_list.append(f"üèôÔ∏è –æ—á–∏—â–µ–Ω –≥–æ—Ä–æ–¥")
                    elif field == 'birth_date':
                        changes_list.append(f"üéÇ –æ—á–∏—â–µ–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
                    else:
                        changes_list.append(f"–æ—á–∏—â–µ–Ω–æ {field}")
            
            changes_description = ' ‚Ä¢ '.join(changes_list) if changes_list else '–ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω'
            
            self.log_event(
                user_id=user_id,
                username=username,
                event_type='profile_update',
                ip_address=ip_address,
                user_agent=user_agent,
                data=changes_description
            )
            logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {changes_description}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    def get_registration_stats(self, days=30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ - –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–°"""
        if not self.client:
            return []
            
        try:
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤–º–µ—Å—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            result = self.client.query(f'''
                SELECT 
                    toDate(timestamp) as date,
                    count() as registrations
                FROM user_events
                WHERE event_type = 'registration' 
                    AND timestamp >= today() - {days}
                GROUP BY date
                ORDER BY date DESC
            ''')
            return result.result_rows
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {e}")
            return []

    def get_unique_users_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ª–æ–≥–∏–Ω—É –∏ email"""
        if not self.client:
            return {'unique_usernames': 0, 'unique_emails': 0}
            
        try:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            unique_usernames_result = self.client.query('''
                SELECT uniq(username) as unique_usernames
                FROM user_events
                WHERE event_type = 'registration'
                    AND username != ''
            ''')
            unique_usernames = unique_usernames_result.result_rows[0][0] if unique_usernames_result.result_rows else 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤
            unique_emails_result = self.client.query('''
                SELECT uniq(email) as unique_emails
                FROM user_events
                WHERE event_type = 'registration'
                    AND email != ''
                    AND email != 'null'
            ''')
            unique_emails = unique_emails_result.result_rows[0][0] if unique_emails_result.result_rows else 0
            
            return {
                'unique_usernames': unique_usernames,
                'unique_emails': unique_emails
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {'unique_usernames': 0, 'unique_emails': 0}

    def get_recent_events(self, limit=100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
        if not self.client:
            return []
            
        try:
            result = self.client.query(f'''
                SELECT user_id, username, event_type, email, timestamp, data
                FROM user_events
                ORDER BY timestamp DESC
                LIMIT {limit}
            ''')
            return result.result_rows
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
            return []

    def get_user_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.client:
            return {}
            
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
            total_events = self.client.query('SELECT count() FROM user_events').result_rows[0][0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            unique_users = self.client.query('SELECT uniq(user_id) FROM user_events WHERE user_id > 0').result_rows[0][0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
            registrations = self.client.query("SELECT count() FROM user_events WHERE event_type = 'registration'").result_rows[0][0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–∏–Ω–æ–≤
            logins = self.client.query("SELECT count() FROM user_events WHERE event_type = 'login'").result_rows[0][0]
            
            return {
                'total_events': total_events,
                'unique_users': unique_users,
                'registrations': registrations,
                'logins': logins
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
clickhouse_logger = ClickHouseLogger()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ views
def log_registration(user_id, username, email, ip_address='', user_agent=''):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    clickhouse_logger.log_registration(user_id, username, email, ip_address, user_agent)

def log_login(user_id, username, ip_address='', user_agent=''):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–∞"""
    clickhouse_logger.log_login(user_id, username, ip_address, user_agent)

def log_logout(user_id, username, ip_address='', user_agent=''):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∞"""
    clickhouse_logger.log_logout(user_id, username, ip_address, user_agent)

def log_email_sent(user_id, username, email, email_type):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
    clickhouse_logger.log_email_sent(user_id, username, email, email_type)

def log_email_verified(user_id, username, email):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email"""
    clickhouse_logger.log_email_verified(user_id, username, email)

def log_profile_update(user_id, username, changes, ip_address='', user_agent=''):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    clickhouse_logger.log_profile_update(user_id, username, changes, ip_address, user_agent)